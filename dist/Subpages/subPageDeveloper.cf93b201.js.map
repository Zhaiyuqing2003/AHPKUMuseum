{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/runtime-js/lib/bundle-manifest.js","./node_modules/@parcel/runtime-js/lib/JSRuntime.js","./node_modules/@material-ui/core/ListItemAvatar/listItemAvatarClasses.js","./node_modules/@material-ui/core/ListItemAvatar/ListItemAvatar.js","./node_modules/@parcel/runtime-js/lib/bundle-url.js","./node_modules/@parcel/runtime-js/lib/relative-path.js","./src/components/Developer.tsx","./src/Subpages/subPageDeveloper.tsx"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _plugin() {\n  const data = require(\"@parcel/plugin\");\n\n  _plugin = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _utils() {\n  const data = require(\"@parcel/utils\");\n\n  _utils = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _nullthrows() {\n  const data = _interopRequireDefault(require(\"nullthrows\"));\n\n  _nullthrows = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n}; // Used for as=\"\" in preload/prefetch\n\nconst TYPE_TO_RESOURCE_PRIORITY = {\n  css: 'style',\n  js: 'script'\n};\nconst BROWSER_PRELOAD_LOADER = './loaders/browser/preload-loader';\nconst BROWSER_PREFETCH_LOADER = './loaders/browser/prefetch-loader';\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n} // This cache should be invalidated if new dependencies get added to the bundle without the bundle objects changing\n// This can happen when we reuse the BundleGraph between subsequent builds\n\n\nlet bundleDependencies = new WeakMap();\n\nvar _default = new (_plugin().Runtime)({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let {\n      asyncDependencies,\n      otherDependencies\n    } = getDependencies(bundle);\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        if (!bundle.env.shouldScopeHoist) {\n          // If this bundle already has the asset this dependency references,\n          // return a simple runtime of `Promise.resolve(internalRequire(assetId))`.\n          // The linker handles this for scope-hoisting.\n          assets.push({\n            filePath: __filename,\n            code: `module.exports = Promise.resolve(module.bundle.root(${JSON.stringify(bundleGraph.getAssetPublicId(resolved.value))}))`,\n            dependency\n          });\n        }\n      } else {\n        let loaderRuntime = getLoaderRuntime({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value,\n          options\n        });\n\n        if (loaderRuntime != null) {\n          assets.push(loaderRuntime);\n        }\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      // Resolve the dependency to a bundle. If inline, export the dependency id,\n      // which will be replaced with the contents of that bundle later.\n      let referencedBundle = bundleGraph.getReferencedBundle(dependency, bundle);\n\n      if (referencedBundle !== null && referencedBundle !== void 0 && referencedBundle.isInline) {\n        assets.push({\n          filePath: _path().default.join(__dirname, `/bundles/${referencedBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // Otherwise, try to resolve the dependency to an external bundle group\n      // and insert a URL to that bundle.\n\n\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows().default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let entries = b.getEntryAssets();\n        return entries.some(e => bundleGroup.entryAssetId === e.id);\n      }));\n\n      if (bundle.env.outputFormat === 'commonjs' && mainBundle.type === 'js') {\n        assets.push({\n          filePath: __filename,\n          dependency,\n          code: `module.exports = require(\"./\" + ${getRelativePathExpr(bundle, mainBundle, options)})`\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle, options));\n    } // In development, bundles can be created lazily. This means that the parent bundle may not\n    // know about all of the sibling bundles of a child when it is written for the first time.\n    // Therefore, we need to also ensure that the siblings are loaded when the child loads.\n\n\n    if (options.shouldBuildLazily && bundle.env.outputFormat === 'global') {\n      let referenced = bundleGraph.getReferencedBundles(bundle).filter(b => !b.isInline);\n\n      for (let referencedBundle of referenced) {\n        let loaders = getLoaders(bundle.env);\n\n        if (!loaders) {\n          continue;\n        }\n\n        let loader = loaders[referencedBundle.type];\n\n        if (!loader) {\n          continue;\n        }\n\n        let relativePathExpr = getRelativePathExpr(bundle, referencedBundle, options);\n        let loaderCode = `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n        assets.push({\n          filePath: __filename,\n          code: loaderCode,\n          isEntry: true\n        });\n      }\n    }\n\n    if (shouldUseRuntimeManifest(bundle, options) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getDependencies(bundle) {\n  let cachedDependencies = bundleDependencies.get(bundle);\n\n  if (cachedDependencies) {\n    return cachedDependencies;\n  } else {\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    bundleDependencies.set(bundle, {\n      asyncDependencies,\n      otherDependencies\n    });\n    return {\n      asyncDependencies,\n      otherDependencies\n    };\n  }\n}\n\nfunction getLoaderRuntime({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph,\n  options\n}) {\n  let loaders = getLoaders(bundle.env);\n\n  if (loaders == null) {\n    return;\n  }\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline);\n  let mainBundle = (0, _nullthrows().default)(externalBundles.find(bundle => {\n    var _bundle$getMainEntry;\n\n    return ((_bundle$getMainEntry = bundle.getMainEntry()) === null || _bundle$getMainEntry === void 0 ? void 0 : _bundle$getMainEntry.id) === bundleGroup.entryAssetId;\n  })); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n  // Also do this when building lazily or the runtime itself could get deduplicated and only\n  // exist in the parent. This causes errors if an old version of the parent without the runtime\n  // is already loaded.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary || options.shouldBuildLazily) {\n    externalBundles = [mainBundle];\n  } else {\n    // Otherwise, load the bundle group entry after the others.\n    externalBundles.splice(externalBundles.indexOf(mainBundle), 1);\n    externalBundles.reverse().push(mainBundle);\n  } // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to, options); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows().default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    let code = `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`; // In development, clear the require cache when an error occurs so the\n    // user can try again (e.g. after fixing a build error).\n\n    if (options.mode === 'development' && bundle.env.outputFormat === 'global') {\n      code += '.catch(err => {delete module.bundle.cache[module.id]; throw err;})';\n    }\n\n    return code;\n  }).filter(Boolean);\n\n  if (bundle.env.context === 'browser' && !options.shouldBuildLazily) {\n    loaderModules.push(...externalBundles // TODO: Allow css to preload resources as well\n    .filter(to => to.type === 'js').flatMap(from => {\n      let {\n        preload,\n        prefetch\n      } = getHintedBundleGroups(bundleGraph, from);\n      return [...getHintLoaders(bundleGraph, bundle, preload, BROWSER_PRELOAD_LOADER, options), ...getHintLoaders(bundleGraph, bundle, prefetch, BROWSER_PREFETCH_LOADER, options)];\n    }));\n  }\n\n  if (loaderModules.length === 0) {\n    return;\n  }\n\n  let loaderCode = loaderModules.join(', ');\n\n  if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n    loaderCode = `Promise.all([${loaderCode}])`;\n\n    if (bundle.env.outputFormat !== 'global') {\n      loaderCode += `.then(r => r[r.length - 1])`;\n    }\n  } else {\n    loaderCode = `(${loaderCode})`;\n  }\n\n  if (bundle.env.outputFormat === 'global' && mainBundle.type === 'js') {\n    loaderCode += `.then(() => module.bundle.root('${bundleGraph.getAssetPublicId(bundleGraph.getAssetById(bundleGroup.entryAssetId))}')${// In global output with scope hoisting, functions return exports are\n    // always returned. Otherwise, the exports are returned.\n    bundle.env.shouldScopeHoist ? '()' : ''})`;\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = ${loaderCode};`,\n    dependency\n  };\n}\n\nfunction getHintedBundleGroups(bundleGraph, bundle) {\n  let preload = [];\n  let prefetch = [];\n  let {\n    asyncDependencies\n  } = getDependencies(bundle);\n\n  for (let dependency of asyncDependencies) {\n    var _dependency$meta;\n\n    let attributes = (_dependency$meta = dependency.meta) === null || _dependency$meta === void 0 ? void 0 : _dependency$meta.importAttributes;\n\n    if (typeof attributes === 'object' && attributes != null && ( // $FlowFixMe\n    attributes.preload || attributes.prefetch)) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if ((resolved === null || resolved === void 0 ? void 0 : resolved.type) === 'bundle_group') {\n        // === true for flow\n        if (attributes.preload === true) {\n          preload.push(resolved.value);\n        }\n\n        if (attributes.prefetch === true) {\n          prefetch.push(resolved.value);\n        }\n      }\n    }\n  }\n\n  return {\n    preload,\n    prefetch\n  };\n}\n\nfunction getHintLoaders(bundleGraph, from, bundleGroups, loader, options) {\n  let hintLoaders = [];\n\n  for (let bundleGroupToPreload of bundleGroups) {\n    let bundlesToPreload = bundleGraph.getBundlesInBundleGroup(bundleGroupToPreload);\n\n    for (let bundleToPreload of bundlesToPreload) {\n      let relativePathExpr = getRelativePathExpr(from, bundleToPreload, options);\n      let priority = TYPE_TO_RESOURCE_PRIORITY[bundleToPreload.type];\n      hintLoaders.push(`require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr}, ${priority ? JSON.stringify(priority) : 'null'}, ${JSON.stringify(bundleToPreload.target.env.outputFormat === 'esmodule')})`);\n    }\n  }\n\n  return hintLoaders;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  let parents = bundleGraph.getParentBundles(bundle);\n  return bundle.isEntry || parents.length === 0 || parents.some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to, options) {\n  let relativePathExpr = getRelativePathExpr(from, to, options);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[bundle.publicId] = (0, _nullthrows().default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to, options) {\n  if (shouldUseRuntimeManifest(from, options)) {\n    return `require('./relative-path')(${JSON.stringify(from.publicId)}, ${JSON.stringify(to.publicId)})`;\n  }\n\n  return JSON.stringify((0, _utils().relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle, options) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser() && options.mode === 'production';\n}","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport ListContext from '../List/ListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemAvatarUtilityClass } from './listItemAvatarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    alignItems,\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\n\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return _extends({}, styles.root, styleProps.alignItems === 'flex-start' && styles.alignItemsFlexStart);\n  }\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  minWidth: 56,\n  flexShrink: 0\n}, styleProps.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = React.useContext(ListContext);\n\n  const styleProps = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, _extends({\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default ListItemAvatar;","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar resolve = require('./bundle-manifest').resolve;\n\nmodule.exports = function (fromId, toId) {\n  return relative(dirname(resolve(fromId)), resolve(toId));\n};\n\nfunction dirname(_filePath) {\n  if (_filePath === '') {\n    return '.';\n  }\n\n  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;\n  var slashIndex = filePath.lastIndexOf('/');\n  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);\n}\n\nfunction relative(from, to) {\n  if (from === to) {\n    return '';\n  }\n\n  var fromParts = from.split('/');\n\n  if (fromParts[0] === '.') {\n    fromParts.shift();\n  }\n\n  var toParts = to.split('/');\n\n  if (toParts[0] === '.') {\n    toParts.shift();\n  } // Find where path segments diverge.\n\n\n  var i;\n  var divergeIndex;\n\n  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      divergeIndex = i;\n    }\n  } // If there are segments from \"from\" beyond the point of divergence,\n  // return back up the path to that point using \"..\".\n\n\n  var parts = [];\n\n  for (i = 0; i < fromParts.length - divergeIndex; i++) {\n    parts.push('..');\n  } // If there are segments from \"to\" beyond the point of divergence,\n  // continue using the remaining segments.\n\n\n  if (toParts.length > divergeIndex) {\n    parts.push.apply(parts, toParts.slice(divergeIndex));\n  }\n\n  return parts.join('/');\n}\n\nmodule.exports._dirname = dirname;\nmodule.exports._relative = relative;","import * as React from \"react\";\n\nimport {\n    Avatar,\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Chip,\n    Grid,\n    Typography,\n    useTheme,\n    CardActions,\n    useMediaQuery,\n    Paper,\n    fabClasses\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useTranslation } from \"react-i18next\";\nimport Divider from '@material-ui/core/Divider';\n\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\n\n\n\n\n\n//@ts-ignore\nimport PictureTom from \"../images/subpage/developer/SuperTom.webp\"\n//@ts-ignore\nimport PictureKevin from \"../images/subpage/developer/SuperKevin.webp\"\n\nconst Members = [\n    {\n        name : \"TanChuPing\",\n        position : [\"XiangMuCeHua\",\"XiangMuFuZeRen\",\"QianDuanSheJi\", \"ZuJianGongNeng\", \"QianHouDuanJiaoHu\",\"ZiLiao\",\"FanYi\"],\n        email : \"tanchuping@i.pkuschool.edu.cn\",\n        githubpage : \"https://github.com/DaltonWritingCenter\"\n    },\n\n]\nconst OtherMembers = [\n    {\n        \n            name : \"ZhaiYuQing\",\n            position : [\"JiChuKuangJia\",\"QianDuanSheJi\",\"HouQiWeiHu\", \"FanYi\", \"ZiLiao\"],\n            head : PictureKevin\n\n    },    {\n        name : \"JingGe\",\n        position : [\"XuanChuan\",\"ZiLiao\"],\n     \n    },    {\n        name : \"HeTianYang\",\n        position : [\"XuanChuan\",\"ZiLiao\"],\n     \n    }\n]\n\n\nconst MemberPicture = {\n    TanChuPing : PictureTom,\n    ZhaiYuQing : PictureKevin,\n\n}\n\n\nconst useMemberContentStyle = makeStyles((theme) => ({\n    card : {\n        padding : theme.spacing(1, 2, 1.5),\n        // maxwidth: 100,\n    },\n    CardMedia : {\n        margi: 'auto',\n    },\n    avatar : {\n        height : theme.spacing(8),\n        width : theme.spacing(8)\n    },\n    chip : {\n        userSelect : \"none\",\n        boxShadow : \"none !important\"\n    },\n    gridContainer : {\n        width : \"100%\",\n        margin : theme.spacing(0)\n    },\n    gridItem : {\n        //width : \"33%\"\n        flexGrow : 1\n    }\n}))\n\n\nexport default function MemberContent(){\n    const classes = useMemberContentStyle();\n    const theme = useTheme();\n    const { t } = useTranslation(\"developer\");\n    let { between, down, up, values } = theme.breakpoints;\n    //@ts-ignore\n    let { desktop, laptop } = values;\n    let isLargerThanDesktop = useMediaQuery(up(desktop));\n    let isLaptop = useMediaQuery(between(laptop, desktop));\n    let isSmallerThanLaptop = useMediaQuery(down(laptop));\n    // maxWidth: isLargerThanDesktop ? 550 : 350\n    return (\n    <>\n    <Box padding = '20px'>\n      <Typography variant = 'h4' textAlign = 'center' paddingTop = '15px'>{t('Team')}</Typography>  \n    </Box>\n    \n    <Box width = { 1 } padding = { theme.spacing(3) }>\n        <Grid\n            // className = { classes.gridContainer }\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\" \n            spacing = { 4 }>{\n            Members.map(({ name,\n                position,\n                email,\n                githubpage,\n                \n            }) => {\n                return (<Grid\n                        // lg = {4}\n                        // xl = {4}\n                        // md = {6}\n                        // sm = {12}\n                        // xs = {18}\n                        direction=\"row\"\n                        justifyContent=\"space-evenly\"\n                        item\n                        container\n                        className = { classes.gridItem }\n                        key = { name }>\n                    <Grid item>\n                    <Card\n                        sx = {{maxWidth: isLargerThanDesktop ? 580 : 350}}\n                        variant = \"outlined\"\n                        className = { classes.card }>\n                        <CardHeader\n                            avatar = {\n                                <Avatar\n                                    className = { classes.avatar }\n                                    src = { MemberPicture[name] } />\n                            }\n                            title = {\n                                <Box paddingBottom = { theme.spacing(0.5) }>\n                                    <Grid container spacing = { 1 } wrap = \"nowrap\">\n                                        <Grid item>\n                                            <Box\n                                                fontWeight = \"bold\"\n                                                \n                                                component = \"span\"\n                                                whiteSpace = \"nowrap\">\n                                                <Typography variant=\"h4\">\n                                                     {   t(name)  }\n                                                </Typography>\n                                               \n                                            </Box>\n                                        </Grid>\n\n                                    </Grid>\n                                </Box>\n                            }\n                            subheader = {<Grid container spacing = { 0.5 }>{\n                                    position.map((pos, index) => {\n                                        return (<Grid item key = { pos }>\n                                            <Chip label= { t(pos) }\n                                                className = { classes.chip }\n                                                clickable\n                                                size = \"small\"\n                                                variant = \"outlined\"\n                                                color = \"primary\"\n                                            ></Chip>\n                                        </Grid>)\n                                    })\n                                }</Grid>\n                            }\n\n                            titleTypographyProps = {{ variant : \"h4\" }}\n                            />\n                        <CardContent>\n                            <Grid container spacing = { 2 }>\n                                <Grid item>\n                                    <Typography>\n                                       {t('LianXi') + ': '} {\n                                            <Box component = \"span\" fontWeight = \"bold\">\n                                                { email }\n                                            </Box>\n                                        }\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                        <CardActions>\n                            <Grid container justifyContent=\"flex-end\">\n                                <Button\n                                    color = \"primary\"\n                                    disableElevation\n                                    variant = \"contained\"\n                                    href = { githubpage }>\n                                    {t('FangWenGithub')}\n                                </Button>\n                            </Grid>\n                        </CardActions>\n                    </Card>\n                    </Grid>\n\n                    <Grid item>\n                    {OtherMembers.map(({ name,\n                        position, head     \n                    }) => {\n                return (\n                        <Paper variant = \"outlined\" sx = {{maxWidth: isLargerThanDesktop ? 550 : 350}}>\n                            <List sx={{ width: '100%', maxWidth: isLargerThanDesktop ? 530 : 350, bgcolor: 'background.paper' }}>\n                            <ListItem alignItems=\"flex-start\">\n                                <ListItemAvatar>\n                                <Avatar alt=\"Remy Sharp\" src= {head} />\n                                </ListItemAvatar>\n                                <ListItemText\n                                primary= {t(name)}\n                                secondary={\n                                    <React.Fragment>\n                                    <Grid container spacing = { 0.5 }>{\n                                    position.map((pos, index) => {\n                                        return (<Grid item key = { pos }>\n                                            <Chip label= { t(pos) }\n                                                className = { classes.chip }\n                                                clickable\n                                                size = \"small\"\n                                                variant = \"outlined\"\n                                                color = \"primary\"\n                                            ></Chip>\n                                        </Grid>)\n                                    })\n                                }</Grid>\n                      \n                                    </React.Fragment>\n                                }\n                                />\n                            </ListItem>\n                            {/* <Divider variant=\"inset\" component=\"li\" /> */}\n \n                            </List>\n                        </Paper>)})}\n                    </Grid>\n                </Grid>)\n            })\n        }</Grid>\n    </Box>\n    <Divider variant=\"middle\"></Divider>\n    {/* <Grid\n    container\n    direction=\"column\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    sx = {{padding : 5, paddingBottom : 6}}\n    >\n        <Grid item>\n            <Typography variant = 'subtitle1'>{t('ZhiChi')}</Typography>\n        </Grid>\n    \n    </Grid> */}\n    {/* <Box width = { 1 } padding = { theme.spacing(3) }>\n        <Grid\n            // className = { classes.gridContainer }\n            container\n            \n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\" \n            spacing = { 4 }>{\n            Submembers.map(({ name,\n                position,\n                email,\n       \n                \n            }) => {\n                return (<Grid\n                        direction=\"row\"\n                        justifyContent=\"space-evenly\"\n                        alignItems=\"center\"\n                        lg = {6}\n                        xl = {6}\n                        md = {6}\n                        sm = {12}\n                        // xs = {18}\n                        item\n                        container\n                        className = { classes.gridItem }\n                        key = { name }>\n                    <Card\n                        variant = \"outlined\"\n                        className = { classes.card }>\n                        <CardHeader\n                            \n                            title = {\n                                <Box paddingBottom = { theme.spacing(0.5) }>\n                                    <Grid container spacing = { 1 } wrap = \"nowrap\">\n                                        <Grid item>\n                                            <Box\n                                                fontWeight = \"bold\"\n                                                \n                                                component = \"span\"\n                                                whiteSpace = \"nowrap\">\n                                                <Typography variant=\"h4\">\n                                                     {   t(name)  }\n                                                </Typography>\n                                               \n                                            </Box>\n                                        </Grid>\n\n                                    </Grid>\n                                </Box>\n                            }\n                            subheader = {<Grid container spacing = { 0.5 }>{\n                                    position.map((pos, index) => {\n                                        return (<Grid item key = { pos }>\n                                            <Chip label= { t(pos) }\n                                                className = { classes.chip }\n                                                clickable\n                                                size = \"small\"\n                                                variant = \"outlined\"\n                                                color = \"primary\"\n                                            ></Chip>\n                                        </Grid>)\n                                    })\n                                }</Grid>\n                            }\n                            titleTypographyProps = {{ variant : \"h4\" }}\n                            />\n                        <CardContent>\n                            <Grid container spacing = { 2 }>\n                                <Grid item>\n                                    <Typography>\n                                       {t('LianXi') + ': '} {\n                                            <Box component = \"span\" fontWeight = \"bold\">\n                                                { email }\n                                            </Box>\n                                        }\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n\n                    </Card>\n                </Grid>)\n            })\n        }</Grid>\n    </Box> */}\n\n\n\n    </>)\n}\n\nexport { MemberContent }","import * as React from \"react\"\nimport {\n    useState,\n    useEffect,\n    useMemo,\n    Suspense\n} from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport {\n    CssBaseline,\n    useMediaQuery,\n} from \"@material-ui/core\"\n\nimport { makeStyles } from \"@material-ui/styles\"\nimport { ThemeProvider, Theme } from \"@material-ui/core/styles\"\n\nimport StyledEngineProvider from \"@material-ui/core/StyledEngineProvider\"\n \nimport '../utils/I18n'\nimport { useTranslation } from \"react-i18next\"\n\nimport ModeType from \"../utils/ModeType\"\nimport LanguageType from \"../utils/LanguageType\"\n\nimport createAppTheme from \"../utils/AppTheme\"\nimport changeWebIconTheme from \"../utils/WebIconTheme\"\n//\nimport \"../utils/FontDependencies\";\n\nimport AppTopBar from \"../components/AppTopBar\"\nimport IndexPageFrontContent from \"../components/IndexPageFrontContent\"\nimport AppContainer from \"../components/AppContainer\"\n\nimport Developer from \"../components/Developer\"\ndeclare module '@material-ui/styles'{\n    interface DefaultTheme extends Theme {}\n}\n\nconst useAppStyle = makeStyles((theme) => ({\n\n}))\n\nfunction main(): void{\n    const container = document.querySelector(\"#container\")\n    ReactDOM.render(<Suspense fallback = \" \"><App /></Suspense>, container)\n}\n\nfunction App(){\n    const [modeType, setModeType] = useState(ModeType.LIGHT)\n    const [languageType, setLanguageType] = useState(LanguageType.zh_CN)\n    const isUserModeTypeDark = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n    const classes = useAppStyle()\n\n    const { t, i18n } = useTranslation(\"index\");\n\n    useEffect(() => {\n        console.log(\"THEME MEDIA QUERY CHANGE DETECTED\")\n\n        setModeType(isUserModeTypeDark ? ModeType.DARK : ModeType.LIGHT)\n    }, [isUserModeTypeDark])\n\n    useEffect(() => {\n        console.log(\"THEME CHANGE DETECTED\")\n\n        changeWebIconTheme(modeType)\n    }, [modeType])\n\n    useEffect(() => {\n        i18n.changeLanguage(languageType, () => {\n            document.title = t(\"websiteTitle\")\n        })\n    }, [languageType])\n\n    console.log(\"modeType: \" + modeType)\n\n    function changeLanguageType(languageType : LanguageType){\n        setLanguageType(languageType)\n    }\n\n    function changeModeType(modeType : ModeType){\n        setModeType(modeType)\n    }\n\n    return (<StyledEngineProvider injectFirst = { true }>\n        <ThemeProvider theme = {\n            useMemo(() => createAppTheme(modeType, languageType), [modeType, languageType])\n        }>\n            <CssBaseline />\n            <AppTopBar\n                onChangeLanguageType = { changeLanguageType }\n                onChangeModeType = { changeModeType }\n            />\n            <AppContainer>\n                <IndexPageFrontContent />\n                <Developer></Developer>\n            </AppContainer>\n            {/* <AppMusicBar/> */}\n        </ThemeProvider>\n    </StyledEngineProvider>)\n}\n\n\n\n\nwindow.onload = main\n"],"names":["$parcel$interopDefault","a","__esModule","default","globalThis","self","window","global","$7d806a7a603c235ec027b73d847f4d95$var$mapping","id","resolved","Error","pairs","keys","Object","i","length","JSON","parse","e","n","v","$7d0e039759db23207d18f0c334f8b7a0$export$getListItemAvatarUtilityClass","slot","defineProperty","get","enumerable","$7d0e039759db23207d18f0c334f8b7a0$export$default","$23bbfecb503d5c318e12103df5706bb2$var$_excluded","$23bbfecb503d5c318e12103df5706bb2$var$ListItemAvatarRoot","name","overridesResolver","props","styles","styleProps","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","$23bbfecb503d5c318e12103df5706bb2$export$default","inProps","ref","className","other","context","classes","slots","$23bbfecb503d5c318e12103df5706bb2$var$useUtilityClasses","$634f916bc30b7d6650877f3f4b6a8b3a$var$bundleURL","err","matches","stack","match","replace","$634f916bc30b7d6650877f3f4b6a8b3a$var$getBundleURL","$824bc590bf0a3702ac7bd27152cb0639$var$resolve","$824bc590bf0a3702ac7bd27152cb0639$var$dirname","_filePath","filePath","slice","slashIndex","lastIndexOf","$824bc590bf0a3702ac7bd27152cb0639$var$relative","from","to","fromParts","split","shift","divergeIndex","toParts","parts","push","apply","join","fromId","toId","_dirname","_relative","$be852e0da6f6c9e3660e47b25bd5f431$var$Members","position","email","githubpage","$be852e0da6f6c9e3660e47b25bd5f431$var$OtherMembers","head","$be852e0da6f6c9e3660e47b25bd5f431$var$MemberPicture","TanChuPing","ZhaiYuQing","$be852e0da6f6c9e3660e47b25bd5f431$var$useMemberContentStyle","theme","card","padding","spacing","CardMedia","margi","avatar","height","width","chip","userSelect","boxShadow","gridContainer","margin","gridItem","flexGrow","$be852e0da6f6c9e3660e47b25bd5f431$export$default","t","between","down","up","values","breakpoints","desktop","laptop","isLargerThanDesktop","isLaptop","isSmallerThanLaptop","variant","textAlign","paddingTop","$e27141a609723822c2cf22e5cc952c40$init","createElement","$eb1f1b35a8103f56dc6b314564d0c6b9$init","Box","container","direction","justifyContent","map","item","key","sx","maxWidth","src","title","paddingBottom","wrap","fontWeight","component","whiteSpace","subheader","pos","index","label","clickable","size","color","titleTypographyProps","disableElevation","href","Grid","bgcolor","alt","primary","secondary","$f94fe8630077a9fc1e9671ef90568390$var$useAppStyle","$f94fe8630077a9fc1e9671ef90568390$var$App","modeType","setModeType","LIGHT","languageType","setLanguageType","zh_CN","isUserModeTypeDark","i18n","console","log","DARK","changeLanguage","document","injectFirst","$e865f59b80a12b9add043ed5d55f13d6$init","onChangeLanguageType","onChangeModeType","onload","querySelector","render","fallback"],"version":3,"file":"subPageDeveloper.cf93b201.js.map"}